---
- name: Extract macs addresses for non mapped networks
  when:
    - not used_mapped_networks
  block:
    - name: Read macs file
      ansible.builtin.slurp:
        src: "{{ os_migrate_data_dir }}/{{ vm_name }}/macs.json"
      register: macs_file

    - name: Parse JSON content
      set_fact:
        macs_list: "{{ macs_file.content | b64decode | from_json | map(attribute='mac') | list }}"

    - name: Create import_workload template
      template:
        src: "network_config.sh.j2"
        dest: "{{ os_migrate_data_dir }}/{{ vm_name }}/network_config.sh"
        mode: '0755'
        comment_start_string: '{='
        comment_end_string: '=}'

- name: Extract macs addresses for mapped networks
  when:
    - used_mapped_networks
  block:
    - name: Read macs file
      ansible.builtin.slurp:
        src: "{{ os_migrate_data_dir }}/{{ vm_name }}/nics.json"
      register: nics_file

    - name: Parse JSON content
      set_fact:
        nics_list: "{{ nics_file.content | b64decode | from_json }}"

    - name: Extract MAC addresses
      set_fact:
        macs_list: "{{ nics_list | map(attribute='mac') | list }}"

    - name: Create import_workload template
      template:
        src: "network_config.sh.j2"
        dest: "{{ os_migrate_data_dir }}/{{ vm_name }}/network_config.sh"
        mode: '0755'
        comment_start_string: '{='
        comment_end_string: '=}'

- name: Read the JSON file
  ansible.builtin.slurp:
    src: "{{ os_migrate_data_dir }}/{{ vm_name }}/guest_info.json"
  register: guest_info

- name: Parse JSON content
  set_fact:
    instance_data: "{{ guest_info.content | b64decode | from_json }}"

- name: Extract vddkpath from guest_info.json
  set_fact:
    vddkpath: "{{ instance_data.instance.hw_folder }}"

- name: Migrate Guest from Vmware using nbdkit
  os_migrate.vmware_migration_kit.migrate.migrate:
    dst_cloud: "{{ dst_cloud }}"
    user:  "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    server: "{{ vcenter_hostname }}"
    vmname: "{{ vm_name }}"
    osmdatadir: "{{ os_migrate_data_dir }}"
    firstboot: "{{ os_migrate_data_dir }}/{{ vm_name }}/network_config.sh"
    vddkpath: "{{ vddkpath }}"
    usesocks: "{{ use_socks | bool }}"
    cbtsync: "{{ cbt_sync | bool }}"
    # convhostname: "{{ conv_host_name }} | default(omit) }}"
  register: migrate_output

- name: Set fact for disk ID
  set_fact:
    volume_uuid: "{{ migrate_output.id }}"
